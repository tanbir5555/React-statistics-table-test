{"version":3,"sources":["components/app/components/table.js","components/app/components/input.js","components/app/components/inputType2.js","components/app/components/header.js","components/app/main.js","components/App.js","index.js"],"names":["Table","CAplus","x_","x_2","sumFD","FreXD","D_","A_","sumFixi","frequencyTotal","PercentageFrequency","RelativeFrequency","frequencyDensity","freXmid","classRange","lcf","hcf","highClass","lowClass","frequency","classes","midPoints","className","id","map","value","index","Input","clearAll","setStateC","setStateF","send","onClick","onSubmit","e","preventDefault","onChange","target","placeholder","InputType2","show","viewHighest","viewSmallest","inputRange","updateInputRange","updateStart","updateEnd","startPoint","endPoint","processDone","process","inputStyles","height","style","Header","mode","setMode","to","Main","useState","inputClasses","setInputClasses","inputClasses2","setInputClasses2","splitInputClass2","setSplitInputClass2","setProcessDone","setStartPoint","setEndPoint","setInputRange","setViewSmallest","setViewHighest","inputFrequency","setInputFrequency","setClasses","setHighClass","setLowClass","setFrequency","setD","setA","setFreXD","setCAplus","setMidPoints","setFreXmid","lessCumulativeFrequency","setLessCumulativeFrequency","greaterCumulativeFrequency","setGreaterCumulativeFrequency","setFrequencyDensity","setRelativeFrequency","setClassRange","setPercentageFrequency","setFrequencyTotal","setSumFixi","setSumFD","setX_","setX_2","ready","setReady","clearVal","General","viewClasses","FREQUENCY","val","split","parseInt","middlePoint","numFre","totalF","classR","lessThanCF","push","length","greaterThanCF","reverse","FrequencyD","toFixed","RelativeF","percentageF","theA","totalClassR","GorClassR","CPlus","theD","frequencyXD","fixi","TheX_","sumFrequencyXD","exact","path","fre","cla","classesNew","range","start","parseFloat","end","rowCount","total","numCounct","upperClass","lowerClass","Frequency","x","condition","filter","console","log","classStructure","toString","sortClass","sort","a","b","maxValClass","minValClass","ran","st","en","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a614afc3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './style/table.css'\r\nexport default function Table({CAplus,x_,x_2,sumFD,FreXD,D_,A_,sumFixi,frequencyTotal,PercentageFrequency,RelativeFrequency,frequencyDensity,freXmid,classRange,lcf,hcf,highClass,lowClass,frequency,classes,midPoints}) {\r\n  return (\r\n    <div className=\"container\">\r\n      <table id=\"customers\">\r\n      <tbody>\r\n          \r\n       \r\n        <tr>\r\n          <td><strong>Classes</strong></td>\r\n          <td><strong>Frequency (fi)</strong></td>\r\n          <td><strong>Less Than Cumulative Frequency (L.c.f)</strong></td>\r\n          <td><strong>Greater Than Cumulative Frequency (M.c.f)</strong></td>\r\n          <td><strong>Upper Class Limit (u/h)</strong></td>\r\n          <td><strong>Lower Class Limit (s/L)</strong></td>\r\n          <td><strong>Middle Points (xi)</strong></td>\r\n\r\n          <td><strong>Class Range (c)</strong></td>\r\n         \r\n          <td><strong>Frequency Density (fi/c)</strong></td>\r\n          <td><strong>Relative Frequency (fi/N)</strong></td>\r\n          <td><strong>Percentage Frequency (fi/N)*100%</strong></td>\r\n          {CAplus?<td><strong>d=(x-{A_})/range</strong></td>:<td><strong>d=(x-{A_})</strong></td>}\r\n\r\n          <td><strong>Frequency * d</strong></td>\r\n          <td><strong>Frequency * Mid Points (fixi)</strong></td>\r\n\r\n\r\n          {/* <td><strong></strong></td> */}\r\n        </tr>\r\n\r\n{classes.map((value,index)=>{\r\n\r\n  return(\r\n    <tr key={index}>\r\n          <td>{value}</td>\r\n          <td>{frequency[index]}</td>\r\n          <td>{lcf[index]}</td>\r\n          <td>{hcf[index]}</td>\r\n          <td>{lowClass[index]}</td>\r\n          <td>{highClass[index]}</td>\r\n          <td>{midPoints[index]}</td>\r\n\r\n          <td>{classRange[index]}</td>\r\n          \r\n          <td>{frequencyDensity[index]}</td>\r\n          <td>{RelativeFrequency[index]}</td>\r\n          <td>{PercentageFrequency[index]}</td>\r\n          <td>{D_[index]}</td>\r\n          <td>{FreXD[index]}</td>\r\n          <td>{freXmid[index]}</td>\r\n\r\n          \r\n      </tr>\r\n  )\r\n})}\r\n        \r\n        \r\n       </tbody>\r\n      </table>\r\n\r\n      <div className='answers'>  \r\n      {CAplus?<div className='ans'><strong className='strong'> Range (C): </strong> {classRange[0]}  </div>:null}\r\n      <div className='ans'><strong className='strong'> A : </strong> {A_}  </div>\r\n      <div className='ans'><strong className='strong'>Sum of Frequency (N) : </strong> {frequencyTotal}  </div>\r\n      <div className='ans'><strong className='strong'> Sum of Frequency & d (x) : </strong> {sumFD}  </div>\r\n      <div className='ans'><strong className='strong'> Sum of Frequency & midPoints (x) (sum fixi) : </strong> {sumFixi}  </div>\r\n      <div className='ans'>{CAplus?<strong className='strong'> x_=A+(sumFd/N)*c (sortMethod) : </strong>:<strong className='strong'> x_=A+(sumFd/N) (sortMethod) : </strong>} {x_}  </div>\r\n      <div className='ans'><strong className='strong'> x_=sumFixi/N (MainMethod) : </strong> {x_2} </div>  \r\n       </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style/input.css\";\r\nexport default function Input({clearAll,frequency,classes,setStateC,setStateF,send}) {\r\n    \r\n  return (\r\n    <div className=\"container\">\r\n      <h3 className=\"header\">Making Statistics Math App</h3>\r\n      <button onClick={()=>{clearAll()}} className='btn-clear'>  Clear </button>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <h3 className=\"header small\">\r\n          Please Enter your <strong>classes</strong>\r\n        </h3>\r\n        <div className=\"inputs-area\">\r\n          {\" \"}\r\n          <textarea value={classes} onChange={(e)=>{setStateC(e.target.value)}} className=\"input\" placeholder=\"10-20,20-30....\">\r\n            \r\n          </textarea>{\" \"}\r\n        </div>\r\n        <h3 className=\"header small\">\r\n          Please Enter your <strong>Frequency</strong>{\" \"}\r\n        </h3>\r\n        <div className=\"inputs-area\">\r\n          {\" \"}\r\n          <textarea value={frequency} onChange={(e)=>{setStateF(e.target.value)}} className=\"input\" placeholder=\"5,8,7,10,2,1,3....\">\r\n            \r\n          </textarea>{\" \"}\r\n        </div>\r\n        <button onClick={()=>{send()}} className=\"btn-send\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport \"./style/input.css\";\r\nexport default function InputType2({viewHighest,viewSmallest,inputRange,updateInputRange,updateStart,updateEnd,startPoint,endPoint,processDone,process,clearAll,classes,setStateC,send}) {\r\n   \r\n    let show;\r\n\r\n    let inputStyles={\r\n        height:\"80px\",\r\n    }\r\n    if(processDone){\r\n        show=(\r\n            \r\n           <div className=''>  \r\n           <div className=''>  \r\n            <h3 className=\"header small\">\r\n            Please Enter your <strong>classes</strong>\r\n          </h3>\r\n          <div className=\"inputs-area\">\r\n            {\" \"}\r\n            <textarea value={classes} onChange={(e)=>{setStateC(e.target.value)}} className=\"input\" placeholder=\"10,5,8,6,44,64,22,46...\">\r\n              \r\n            </textarea>{\" \"}\r\n          </div>\r\n           \r\n            </div>\r\n           <h3 className=\"header small\">Smallest Class : <strong>{viewSmallest}</strong></h3>\r\n           <h3 className=\"header small\">Highest Class : <strong>{viewHighest}</strong></h3>\r\n            <h3 className=\"header small\">\r\n            Enter distance or range of each <strong>class (c)</strong>\r\n          </h3>\r\n          <div className=\"inputs-area\">\r\n            {\" \"}\r\n            <input style={inputStyles} value={inputRange} onChange={(e)=>{updateInputRange(e.target.value)}} className=\"input\" placeholder=\"10\"/>\r\n              \r\n            \r\n          </div>\r\n\r\n            <h3 className=\"header small\">\r\n            Enter where to start <strong>class</strong>\r\n          </h3>\r\n          <div className=\"inputs-area\">\r\n            {\" \"}\r\n            <input style={inputStyles} value={startPoint} onChange={(e)=>{updateStart(e.target.value)}} className=\"input\" placeholder=\"0\"/>\r\n              \r\n            \r\n          </div>\r\n\r\n          <h3 className=\"header small\">\r\n          Enter where to End <strong>class</strong>\r\n          </h3>\r\n          <div className=\"inputs-area\">\r\n            {\" \"}\r\n            <input style={inputStyles} value={endPoint} onChange={(e)=>{updateEnd(e.target.value)}} className=\"input\" placeholder=\"100\"/>\r\n              \r\n            \r\n          </div>\r\n           \r\n            </div>\r\n        )\r\n    }else{\r\n        show=(\r\n            <div className=''>  \r\n            <h3 className=\"header small\">\r\n            Please Enter your <strong>classes</strong>\r\n          </h3>\r\n          <div className=\"inputs-area\">\r\n            {\" \"}\r\n            <textarea value={classes} onChange={(e)=>{setStateC(e.target.value)}} className=\"input\" placeholder=\"10,5,8,6,44,64,22,46...\">\r\n              \r\n            </textarea>{\" \"}\r\n          </div>\r\n           \r\n            </div>\r\n\r\n        )\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"header\">Making Statistics Math App</h3>\r\n        <button onClick={()=>{clearAll()}} className='btn-clear'>  Clear </button>\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n        >\r\n          {show}\r\n          {/* <h3 className=\"header small\">\r\n            Please Enter your <strong>Frequency</strong>{\" \"}\r\n          </h3>\r\n          <div className=\"inputs-area\">\r\n            {\" \"}\r\n            <textarea value={frequency} onChange={(e)=>{setStateF(e.target.value)}} className=\"input\" placeholder=\"5,8,7,10,2,1,3....\">\r\n              \r\n            </textarea>{\" \"}\r\n          </div> */}\r\n          {/* <button onClick={()=>{process()}} className=\"btn-send\">Process</button> */}\r\n          {processDone?null:<button onClick={()=>{process()}} className=\"btn-send\">Process</button>}\r\n          {processDone?<button onClick={()=>{send()}} className=\"btn-send\">Send</button>:null}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  ","import React from 'react'\r\nimport './style/input.css'\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Header({mode,setMode}) {\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n               {mode?<Link onClick={()=>{setMode(false)}}  className=\"btn-send\" to=\"/React-statistics-table-test/\">Switch</Link>:<Link onClick={()=>{setMode(true)}} className=\"btn-send\" to=\"/React-statistics-table-test/switch/\">Switch</Link>} \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Table from \"./components/table\";\r\nimport Input from \"./components/input\";\r\nimport InputType2 from \"./components/inputType2\";\r\nimport Header from \"./components/header\"\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nfunction Main() {\r\n  let [mode,setMode]=useState(true)\r\n\r\n  let [inputClasses, setInputClasses] = useState(\r\n    \"10-20,20-30,30-40,40-50,50-60,60-70,70-200\"\r\n  );\r\n  let [inputClasses2, setInputClasses2] = useState(\"5,6,9,5,7,8,5,15,20,44,45,35,30,32,50,52,15,11,33,44,45,40,60,70,65\");\r\n  let [splitInputClass2,setSplitInputClass2]=useState(\"\")\r\n  let [processDone, setProcessDone] = useState(false);\r\n  let [startPoint,setStartPoint]=useState(\"\")\r\n  let [endPoint,setEndPoint]=useState(\"\")\r\n  let [inputRange,setInputRange]=useState(\"\")\r\n  \r\n  let [viewSmallest,setViewSmallest]=useState(\"\")\r\n  let [viewHighest,setViewHighest]=useState(\"\")\r\n\r\n\r\n\r\n  let [inputFrequency, setInputFrequency] = useState(\"15,12,13,18,17,27,10\");\r\n\r\n  let [classes, setClasses] = useState(\"\");\r\n  let [highClass, setHighClass] = useState(\"\");\r\n  let [lowClass, setLowClass] = useState(\"\");\r\n  let [frequency, setFrequency] = useState(\"\");\r\n\r\n  let [D_, setD] = useState(\"\");\r\n  let [A_, setA] = useState(\"\");\r\n  let [FreXD, setFreXD] = useState(\"\");\r\n  let [CAplus, setCAplus] = useState(\"\");\r\n\r\n  let [midPoints, setMidPoints] = useState(\"\");\r\n  let [freXmid, setFreXmid] = useState(\"\");\r\n  let [lessCumulativeFrequency, setLessCumulativeFrequency] = useState(\"\");\r\n  let [greaterCumulativeFrequency, setGreaterCumulativeFrequency] = useState(\r\n    \"\"\r\n  );\r\n  let [frequencyDensity, setFrequencyDensity] = useState(\"\");\r\n  let [RelativeFrequency, setRelativeFrequency] = useState(\"\");\r\n  let [classRange, setClassRange] = useState(\"\");\r\n  let [PercentageFrequency, setPercentageFrequency] = useState(\"\");\r\n\r\n  //sum\r\n  let [frequencyTotal, setFrequencyTotal] = useState(\"\");\r\n  let [sumFixi, setSumFixi] = useState(\"\");\r\n  let [sumFD, setSumFD] = useState(\"\");\r\n\r\n  //calculation\r\n  let [x_, setX_] = useState(\"\");\r\n  let [x_2, setX_2] = useState(\"\");\r\n\r\n  let [ready, setReady] = useState(false);\r\n\r\n  function updateClasses(cla) {\r\n    setInputClasses(() => {\r\n      return cla;\r\n    });\r\n\r\n    clearVal();\r\n  }\r\n\r\n  function updateClasses2(cla) {\r\n    setInputClasses2(cla);\r\n    setReady(false);\r\n    setProcessDone(false)\r\n  }\r\n  function updateInputRange(ran){\r\n    setInputRange(ran)\r\n    setReady(false);\r\n  }\r\n  function updateStart(st){\r\n    setStartPoint(st)\r\n    setReady(false);\r\n  }\r\n  function updateEnd(en){\r\n    setEndPoint(en)\r\n    setReady(false);\r\n  }\r\n  function process() {\r\n    let classesNew = inputClasses2.split(\",\");\r\n    console.log(classesNew.length)\r\n    classesNew = classesNew.map((value) => parseInt(value));\r\n    setSplitInputClass2(classesNew)\r\n    let sortClass = classesNew.sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n    let maxValClass = sortClass[sortClass.length - 1];\r\n    let minValClass = sortClass[0];\r\n    setViewSmallest(minValClass)\r\n    setViewHighest(maxValClass)\r\n    // alert(\"min : \" + minValClass + \" max : \" + maxValClass);\r\n    \r\n    setProcessDone(true)\r\n    \r\n    \r\n    // console.log(rowCount())\r\n\r\n  }\r\n\r\n  function send2(){\r\n    let classesNew =splitInputClass2\r\n    let range = inputRange;\r\n    let start = startPoint;\r\n    start = parseFloat(start);\r\n    let end = endPoint;\r\n    end = parseFloat(end);\r\n    range = parseFloat(range);\r\n\r\n    let rowCount = function () {\r\n      let total = start;\r\n      let numCounct = 0;\r\n      while (total < end) {\r\n        total += range;\r\n        numCounct += 1;\r\n      }\r\n      //console.log(numCounct)\r\n      return numCounct;\r\n    };\r\n    let upperClass = [],\r\n      lowerClass = [],\r\n      Frequency=[]\r\n    for (let x = 0; x < rowCount(); x++) {\r\n      lowerClass.push(start + x * range);\r\n      upperClass.push(start + x * range + range);\r\n      let condition=classesNew.filter((e)=>{\r\n        return e>=lowerClass[x] && e<upperClass[x];\r\n      })\r\n      // let howMany=0\r\n      // classesNew.map((value)=>{\r\n        \r\n      //   if(value>=lowerClass[x] && value<upperClass[x]){\r\n      //    howMany+=1\r\n      //   }else{\r\n          \r\n      //   }\r\n      // })\r\n      Frequency.push(condition.length)\r\n      console.log(\"condition :\",condition)\r\n    }\r\n    \r\n    setFrequency(Frequency)\r\n    console.log(lowerClass);\r\n    console.log(upperClass);\r\n\r\n    let classStructure = upperClass.map((value, index) => {\r\n      let StringLow = lowerClass[index].toString();\r\n      let StringHigh = value.toString();\r\n      return StringLow + \"-\" + StringHigh;\r\n    });\r\n    console.log(classStructure);\r\n    setClasses(classStructure)\r\n\r\n    General(classStructure,Frequency)\r\n   \r\n  }\r\n\r\n  function updateFrequency(fre) {\r\n    setInputFrequency(() => {\r\n      return fre;\r\n    });\r\n\r\n    clearVal();\r\n  }\r\n  function clearAll() {\r\n    setInputFrequency(\"\");\r\n    setInputClasses(\"\");\r\n    clearVal();\r\n    setProcessDone(false)\r\n  }\r\n  function clearVal() {\r\n    setProcessDone(false)\r\n    setEndPoint(\"\")\r\n    setStartPoint(\"\")\r\n    setInputRange(\"\")\r\n    setInputClasses2(\"\");\r\n    setFrequency(\"\");\r\n    setClasses(\"\");\r\n    setHighClass(\"\");\r\n    setLowClass(\"\");\r\n    setReady(false);\r\n    setD(\"\");\r\n    setA(\"\");\r\n    setFreXD(\"\");\r\n    setCAplus(\"\");\r\n    setMidPoints(\"\");\r\n    setFreXmid(\"\");\r\n    setLessCumulativeFrequency(\"\");\r\n    setGreaterCumulativeFrequency(\"\");\r\n    setFrequencyDensity(\"\");\r\n    setRelativeFrequency(\"\");\r\n    setClassRange(\"\");\r\n    setPercentageFrequency(\"\");\r\n    setFrequencyTotal(\"\");\r\n    setSumFixi(\"\");\r\n    setSumFD(\"\");\r\n    setX_(\"\");\r\n    setX_2(\"\");\r\n  }\r\n  function classReady() {\r\n    clearVal();\r\n    //class work //class work//class work//class work//class work\r\n    //console.log(classes);\r\n    //console.log(frequency);\r\n    // console.log(classes)\r\n    let viewClasses = inputClasses.split(\",\");\r\n\r\n    setClasses(viewClasses);\r\n    General(viewClasses,inputFrequency.split(\",\"))\r\n    //setting class view\r\n    \r\n  }\r\n\r\n  function General(viewClasses,FREQUENCY){\r\n    let lowClass = viewClasses.map((val) => val.split(\"-\")[0]);\r\n    lowClass = lowClass.map((value) => parseInt(value));\r\n    setLowClass(lowClass);\r\n    let highClass = viewClasses.map((val) => val.split(\"-\")[1]);\r\n    highClass = highClass.map((value) => parseInt(value));\r\n\r\n    setHighClass(highClass);\r\n    let middlePoint = lowClass.map((value, index) => {\r\n      return (value + highClass[index]) / 2;\r\n    });\r\n    //console.log(middlePoint);\r\n\r\n    setMidPoints(() => {\r\n      return middlePoint;\r\n    });\r\n    //class work//class work//class work//class work//class work\r\n\r\n    let numFre = FREQUENCY;\r\n    numFre = numFre.map((value) => parseInt(value));\r\n    \r\n    setFrequency(() => {\r\n      return numFre;\r\n    });\r\n\r\n    let totalF = 0;\r\n    numFre.map((value) => (totalF += value));\r\n    setFrequencyTotal(totalF);\r\n    //console.log(\"frequencyTotal : \",totalF)\r\n\r\n    //class range\r\n    let classR = lowClass.map((value, index) => highClass[index] - value);\r\n    setClassRange(classR);\r\n    //class range\r\n\r\n    //Less Than Cumulative Frequency\r\n\r\n    let lessThanCF = [];\r\n    numFre.map((value, index) => {\r\n      if (index === 0) {\r\n        lessThanCF.push(value);\r\n        return value;\r\n      } else {\r\n        lessThanCF.push(lessThanCF[lessThanCF.length - 1] + value);\r\n        return lessThanCF[lessThanCF.length - 1] + value;\r\n      }\r\n    });\r\n    setLessCumulativeFrequency(lessThanCF);\r\n\r\n    //console.log(\"lessThanCF :\",lessThanCF)\r\n\r\n    //Less Than Cumulative Frequency\r\n\r\n    let greaterThanCF = [];\r\n    numFre = numFre.reverse();\r\n    numFre.map((value, index) => {\r\n      if (index === 0) {\r\n        greaterThanCF.push(value);\r\n        return value;\r\n      } else {\r\n        greaterThanCF.push(greaterThanCF[greaterThanCF.length - 1] + value);\r\n        return greaterThanCF[greaterThanCF.length - 1] + value;\r\n      }\r\n    });\r\n    greaterThanCF = greaterThanCF.reverse();\r\n    setGreaterCumulativeFrequency(greaterThanCF);\r\n\r\n    //console.log(\"greaterThanCF :\",greaterThanCF)\r\n    //successful\r\n    numFre = numFre.reverse();\r\n    let FrequencyD = numFre.map((value, index) => {\r\n      return (value / classR[index]).toFixed(3);\r\n    });\r\n    setFrequencyDensity(() => {\r\n      return FrequencyD;\r\n    });\r\n\r\n    //console.log(\"setFrequencyDensity : \", FrequencyD)\r\n\r\n    //frequency work\r\n    //frequency work\r\n    //frequency work\r\n    //frequency work\r\n    let RelativeF = numFre.map((value) => (value / totalF).toFixed(3));\r\n    setRelativeFrequency(RelativeF);\r\n    //console.log(\"RelativeF :\",RelativeF)\r\n\r\n    let percentageF = RelativeF.map((value) => (value * 100).toFixed(2) + \"%\");\r\n    setPercentageFrequency(percentageF);\r\n    //console.log(\"setPercentageFrequency :\",percentageF)\r\n\r\n    let theA = middlePoint[parseInt(middlePoint.length / 2)];\r\n    setA(theA);\r\n\r\n    let totalClassR = 0;\r\n    classR.map((value, index) => {\r\n      return (totalClassR += value);\r\n    });\r\n    let GorClassR = totalClassR / classR.length;\r\n    let CPlus = true;\r\n    if (GorClassR === classR[0]) {\r\n      CPlus = true;\r\n    } else {\r\n      CPlus = false;\r\n    }\r\n    setCAplus(CPlus);\r\n\r\n    let theD = middlePoint.map((value) => {\r\n      if (CPlus) {\r\n        //console.log(\"same distance range\")\r\n        return (value - theA) / classR[0];\r\n      } else {\r\n        //console.log(\"NOT same distance range\")\r\n        return value - theA;\r\n      }\r\n    });\r\n\r\n    setD(theD);\r\n\r\n    let frequencyXD = theD.map((value, index) => {\r\n      return numFre[index] * value;\r\n    });\r\n    setFreXD(frequencyXD);\r\n\r\n    //fixi\r\n\r\n    let fixi = numFre.map((value, index) => value * middlePoint[index]);\r\n    setFreXmid(fixi);\r\n\r\n    let sumFixi = 0;\r\n    fixi.map((value) => (sumFixi += value));\r\n    setSumFixi(sumFixi);\r\n\r\n    let sumFrequencyXD = 0;\r\n    frequencyXD.map((value) => {\r\n      return (sumFrequencyXD += value);\r\n    });\r\n    setSumFD(sumFrequencyXD);\r\n\r\n    //MAIN CALCULATION\r\n\r\n    //X_\r\n    //sortMethod\r\n\r\n    let TheX_;\r\n    if (CPlus) {\r\n      TheX_ = theA + (sumFrequencyXD / totalF) * classR[0];\r\n      //console.log(\"CPlus : True\")\r\n    } else {\r\n      TheX_ = theA + sumFrequencyXD / totalF;\r\n      //console.log(\"CPlus : false\")\r\n    }\r\n\r\n    setX_(TheX_);\r\n    //console.log(TheX_)\r\n\r\n    //Real method\r\n\r\n    let TheX2 = sumFixi / totalF;\r\n    setX_2(TheX2);\r\n\r\n    setReady(true);\r\n  }\r\n\r\n  //10-20,20-30,30-40,40-50\r\n  //10,55,10,22\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <Router>\r\n        <Header mode={mode} setMode={setMode}/>\r\n        <Switch>\r\n          <Route exact path=\"/React-statistics-table-test/\">\r\n            <Input\r\n              frequency={inputFrequency}\r\n              classes={inputClasses}\r\n              setStateF={updateFrequency}\r\n              setStateC={updateClasses}\r\n              send={classReady}\r\n              clearAll={clearAll}\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/React-statistics-table-test/switch/\">\r\n            <InputType2\r\n              frequency={inputFrequency}\r\n              classes={inputClasses2}\r\n             \r\n              setStateC={updateClasses2}\r\n              send={send2}\r\n              clearAll={clearAll}\r\n              process={process}\r\n              processDone={processDone}\r\n              inputRange={inputRange}\r\n              updateInputRange={updateInputRange}\r\n\r\n\r\n              startPoint={startPoint}\r\n              updateStart={updateStart}\r\n              endPoint={endPoint}\r\n              updateEnd={updateEnd}\r\n\r\n              viewSmallest={viewSmallest}\r\n              viewHighest={viewHighest}\r\n\r\n            />\r\n          </Route>\r\n        </Switch>\r\n\r\n        {ready ? (\r\n          <Table\r\n            lcf={lessCumulativeFrequency}\r\n            hcf={greaterCumulativeFrequency}\r\n            classRange={classRange}\r\n            freXmid={freXmid}\r\n            frequencyDensity={frequencyDensity}\r\n            RelativeFrequency={RelativeFrequency}\r\n            PercentageFrequency={PercentageFrequency}\r\n            CAplus={CAplus}\r\n            D_={D_}\r\n            A_={A_}\r\n            FreXD={FreXD}\r\n            highClass={highClass}\r\n            lowClass={lowClass}\r\n            frequency={frequency}\r\n            classes={classes}\r\n            midPoints={midPoints}\r\n            frequencyTotal={frequencyTotal}\r\n            sumFixi={sumFixi}\r\n            sumFD={sumFD}\r\n            x_={x_}\r\n            x_2={x_2}\r\n          />\r\n        ) : (\r\n          0\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react'\r\nimport Main from './app/main'\r\nexport default function App() {\r\n    return (\r\n        <div>\r\n          <Main/>  \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\n//import * as serviceWorker from './serviceWorker';\n\n//import reportWebVitals from './reportWebVitals';\n //import 'bootstrap/dist/css/bootstrap.min.css';\n// import 'bootstrap/dist/js/jquery-3.4.1.min.js'\n//import 'bootstrap/dist/js/bootstrap.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n//serviceWorker.register();"],"sourceRoot":""}